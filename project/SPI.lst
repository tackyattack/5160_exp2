C51 COMPILER V6.02  SPI                                                                    10/11/2019 21:49:13 PAGE 1   


C51 COMPILER V6.02, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\SPI.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\source\SPI.c DEBUG OBJECTEXTEND PRINT(.\SPI.lst) OBJECT(.\SPI.obj) 

stmt level    source

   1          #include "main.h"
   2          #include "SPI.h"
   3          
   4          #define MAX_CLK_SELECT (7)
   5          #define CPHA_BIT  (2)
   6          #define CPOL_BIT  (3)
   7          #define MSTR_BIT  (4)
   8          #define SSDIS_BIT (5)
   9          #define SPEN_BIT  (6)
  10          #define SPR0_BIT  (0)
  11          #define SPR1_BIT  (1)
  12          #define SPR2_BIT  (7)
  13          
  14          uint8_t SPI_master_init(uint32_t clock_rate)
  15          {
  16   1        uint8_t divider,power2_val,power2_cnt;
  17   1        divider = (uint8_t)(((OSC_FREQ/OSC_PER_INST)*6)/clock_rate);
  18   1        power2_val = 2; // start off checking 2
  19   1      
  20   1        // run through each possible divider and check if it's still
  21   1        // less than the requested divider
  22   1        for(power2_cnt = 0; (power2_cnt < MAX_CLK_SELECT) && (divider > power2_val); power2_cnt++)
  23   1        {
  24   2          power2_val = power2_val * 2;
  25   2        }
  26   1      
  27   1        if(divider <= power2_val)
  28   1        {
  29   2          SPCON = ( power2_cnt&(1<<0) | power2_cnt&(1<<1) | ((power2_cnt&(1<<2))>>2)<<SPR2_BIT )
  30   2                  |(CPOL<<CPOL_BIT)|(CPHA<<CPHA_BIT)|(1<<SPEN_BIT)|(1<<MSTR_BIT)|(1<<SSDIS_BIT);
  31   2        }
  32   1        else
  33   1        {
  34   2          return SPI_INIT_ILLEGAL_CLOCK_RATE;
  35   2        }
  36   1      
  37   1        return SPI_INIT_OK;
  38   1      }
  39          
  40          uint8_t SPI_transfer(uint8_t send_value, uint8_t *received_value)
  41          {
  42   1        uint8_t timeout, status, error_flag;
  43   1      
  44   1        //send and wait
  45   1        SPDAT = send_value;
  46   1        timeout = 0;
  47   1        do
  48   1        {
  49   2          status = SPSTA;
  50   2          timeout++;
  51   2        } while(((status&0xF0)==0)&&(timeout!=0));
  52   1      
  53   1        // check for errors
  54   1        if(timeout==0)
  55   1        {
C51 COMPILER V6.02  SPI                                                                    10/11/2019 21:49:13 PAGE 2   

  56   2          error_flag = SPI_TRANSFER_TIMEOUT_ERROR;
  57   2          *received_value = 0xFF;
  58   2        }
  59   1        else if((status&0x70)!=0)
  60   1        {
  61   2          error_flag = SPI_TRANSFER_SPI_ERROR;
  62   2          *received_value = 0xFF;
  63   2        }
  64   1        else
  65   1        {
  66   2          error_flag = SPI_TRANSFER_OK;
  67   2          *received_value = SPDAT;
  68   2        }
  69   1      
  70   1        return error_flag;
  71   1      
  72   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    129    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
